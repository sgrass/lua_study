
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    resolver 8.8.8.8;

    #lua模块路径，其中”;;”表示默认搜索路径，默认到/usr/servers/nginx下找  
    lua_package_path "/usr/local/Cellar/openresty/1.11.2.2_2/lualib/?.lua;;";  #lua 模块  
    lua_package_cpath "/usr/local/Cellar/openresty/1.11.2.2_2/lualib/?.so;;";  #c模块 

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format log_resp_body  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '$request_time $bytes_sent $request_length "$request_body" "$resp_body"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8686;
        server_name  localhost;

        #charset koi8-r;

        access_log  logs/host.access.log log_resp_body;

	lua_need_request_body on;

        set $resp_body "";

    body_filter_by_lua '
        local maxlen = 1000
        ngx.ctx.buffered = ngx.ctx.buffered or ""
        if #ngx.ctx.buffered < maxlen then
            ngx.ctx.buffered = ngx.ctx.buffered .. string.sub(ngx.arg[1], 1, maxlen - #ngx.ctx.buffered)
        end
        if ngx.arg[2] then
            ngx.var.resp_body = ngx.ctx.buffered
        end
    ';

    location / {
        root   html;
        index  index.html index.htm;
    }

	location /test { 
 	    default_type 'text/html'; 
        charset utf8;  
        proxy_set_header Host  $host;
        proxy_set_header X-Forwarded-For  $remote_addr;
        lua_code_cache off;  
  	    #content_by_lua 'ngx.say("hello, lua")'; 
        content_by_lua_file /Users/grass/Documents/lua_study/test.lua;
        #expires 1ms;
	}

    location ~/lua_request/(\d+)/(\d+) {  
        default_type "text/html";
        lua_code_cache off;
        proxy_set_header Host  $host;
        proxy_set_header X-Forwarded-For  $remote_addr;
        #设置nginx变量  
        set $a $1;   
        set $b $host;  
        #nginx内容处理  
        content_by_lua_file /Users/grass/Documents/lua_study/test_request.lua;  
        #内容体处理完成后调用  
        echo_after_body "ngx.var.b $b";
    } 

    location /lua_response_1 {  
        default_type "text/html";  
        lua_code_cache off;
        content_by_lua_file /Users/grass/Documents/lua_study/test_response.lua;
    }

    location /lua_module {  
        default_type "text/html";  
        lua_code_cache on;
        content_by_lua_file /Users/grass/Documents/lua_study/test_module.lua;
    }

    location /lua_redis_basic {  
        default_type 'text/html';  
        lua_code_cache off;  
        content_by_lua_file /Users/grass/Documents/lua_study/redis_basic.lua;  
    } 

    location /lua_mysql {  
        default_type 'text/html';  
        lua_code_cache off;  
        content_by_lua_file /Users/grass/Documents/lua_study/test_mysql.lua;  
    } 

    location /lua_http1 {  
        default_type 'text/html';  
        lua_code_cache off;  
        content_by_lua_file /Users/grass/Documents/lua_study/test_http1.lua;  
    } 

    location /lua_json {  
        default_type 'text/html';  
        lua_code_cache off;  
        content_by_lua_file /Users/grass/Documents/lua_study/test_json.lua;  
    } 

    #set $template_location "/templates";
    set $template_root "/Users/grass/Documents/lua_study/lua_template";
    location /lua_template {  
        charset utf8;
        default_type 'text/html';  
        lua_code_cache off; 
        #internal; 
        #alias /Users/grass/Documents/lua_study/lua_template2;
        content_by_lua_file /Users/grass/Documents/lua_study/test_template.lua;
    } 

    location /lua_template3 {  
        charset utf8;
        default_type 'text/html';  
        lua_code_cache off; 
        content_by_lua_file /Users/grass/Documents/lua_study/test_template2.lua;
    } 

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
